---
- name: "INSTALL | Add K8S repo"
  yum_repository:
   name: kubernetes
   description: kubernetes
   baseurl: https://pkgs.k8s.io/core:/stable:/v{{ k8sversion }}/rpm/
   enabled: yes
   gpgcheck: yes
   gpgkey: https://pkgs.k8s.io/core:/stable:/v{{ k8sversion }}/rpm/repodata/repomd.xml.key
   exclude: kubelet kubeadm kubectl cri-tools kubernetes-cni

- name: "INSTALL | KubeLET"
  dnf:
    name: kubelet
    state: latest
    disable_excludes: "kubernetes"

- name: Disable swap permanently, persist reboots
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes

- name: "INSTALL | KubeADM"
  dnf:
    name: kubeadm
    state: latest
    disable_excludes: "kubernetes"

- name: "INSTALL | KubeCTL"
  dnf:
    name: kubectl
    state: latest
    disable_excludes: "kubernetes"

- name: Stop swap for kubelet
  command: "swapoff -a"
  ignore_errors: true

- name: Start service kubelet, if not started
  service:
   name: kubelet
   enabled: true

###Update networking
- name: "INSTALL | MODPROBE BRO"
  command: "modprobe br_netfilter"
  
- name: "INSTALL | MODPROBE IP_FORWARD_FILE"
  shell: "echo 1 > /proc/sys/net/ipv4/ip_forward"
  become: true

- name: INSTALL | MODPROBE BDRIGE_NF_FILE
  shell: "echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables"
  become: true
#Finished networking
#Join Node
- name: Check if the node exists in the cluster
  command: kubectl get node "{{ ansible_hostname }}" --no-headers
  register: node_check
  failed_when: node_check.rc not in [0, 1]
  ignore_errors: true
  delegate_to: "{{ groups['master'][0] }}"

- name: Skip join if node exists and is Ready
  debug:
    msg: "Node {{ ansible_hostname }} already exists in the cluster, skipping join."
  when: node_check.rc == 0

- name: Generate join token
  command: kubeadm token create --print-join-command
  register: kubeadm_join_cmd
  delegate_to: "{{ groups['master'][0] }}"
  when: node_check.rc != 0

- set_fact:
    kubeadm_join: "{{ kubeadm_join_cmd.stdout }}"
  when: node_check.rc != 0

- debug:
    var: kubeadm_join
  when: node_check.rc != 0

- name: Store join command
  copy:
    content: "{{ kubeadm_join }}"
    dest: "/etc/kubernetes/kubeadm-join.command"
  when: node_check.rc != 0

- name: Run kubeadm reset (to recover the node)
  command: "kubeadm reset -f"
  become: true
  when: node_check.rc != 0

- name: Run kubeadm join
  command: "{{ kubeadm_join }}"
  ignore_errors: true
  when: node_check.rc != 0

- name: Add tag to worker node
  command: kubectl label node "{{ ansible_hostname }}" node-role.kubernetes.io/worker=true
  delegate_to: "{{ groups['master'][0] }}"