---
- name: Obtener el token para unir nuevos control planes
  shell: kubeadm token create --print-join-command
  register: kubeadm_join_command
  run_once: true
  delegate_to: controlplane1

- name: Obtener el certificate-key para unir control planes
  shell: kubeadm init phase upload-certs --upload-certs | tail -1
  register: cert_key
  run_once: true
  delegate_to: controlplane1

- name: Agregar el flag --control-plane al comando de unión
  set_fact:
    kubeadm_join_cp: "{{ kubeadm_join_command.stdout }} --control-plane --certificate-key {{ cert_key.stdout }}"
  run_once: true
  delegate_to: controlplane1

- name: Mostrar el comando de unión
  debug:
    var: kubeadm_join_cp
  run_once: true
  delegate_to: controlplane1

- name: Check if the node exists in the cluster
  command: kubectl get node "{{ ansible_hostname }}" --no-headers
  register: node_check
  failed_when: node_check.rc not in [0, 1]
  ignore_errors: true
  delegate_to: "{{ groups['master'][0] }}"

- name: Debug node existence check result
  debug:
    msg: "Node {{ ansible_hostname }} check result: {{ node_check.stdout }} with return code: {{ node_check.rc }}"
  when: node_check.rc == 0

- name: Skip join if node exists and is Ready
  debug:
    msg: "Node {{ ansible_hostname }} already exists in the cluster, skipping join."
  when: node_check.rc == 0 and "'Ready'" in node_check.stdout

- name: Unir los nuevos nodos de control plane al clúster
  shell: "{{ kubeadm_join_cp }}"
  become: true
  when: node_check.rc != 0 or "Ready" not in node_check.stdout  # Only execute if the node is not in the cluster or not ready

###Una vez unido aseguramos todso tengan un taint esto no va, falta mirarlo
# - name: Taint control plane to avoid pods running on it
#   command: kubectl taint nodes {{ ansible_hostname }} node-role.kubernetes.io/control-plane=:NoSchedule
#   delegate_to: "{{ groups['master'][0] }}"
#   when: "'node-role.kubernetes.io/control-plane' not in taint_check.stdout"




